version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      to:
        default: "all"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              input=<<parameters.to>>
              if [ $input == FE ]   
              then
                aws s3 rm s3://udapeople-123rewqwert --recursive
                aws cloudformation delete-stack \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              elif [ $input == backend ] 
              then
                aws cloudformation delete-stack \
                  --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              else 
                aws s3 rm s3://udapeople-123rewqwert --recursive
                aws cloudformation delete-stack \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
              fi
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/migration_<<parameters.workflow_id>>)
            echo ${SUCCESS}
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi 
            echo "MIGRATION NOT REVERTED"
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
            
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:  
          name: Test front-end
          command: |
            cd frontend
            sudo apt install nodejs
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:  
          name: Test back-end
          command: |
            cd backend
            sudo apt install nodejs
            npm install
            npm run test  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:  
          name: Scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:  
          name: Scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install gzip tar
          command: |
                yum -y install tar
                yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-backend" \
              --output text >> backend_url.txt
              curl  -d $(cat backend_url.txt) https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/backendurl_${CIRCLE_WORKFLOW_ID:0:7}
              curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/backendurl_${CIRCLE_WORKFLOW_ID:0:7} >> ./.circleci/ansible/inventory.txt
                   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["4f:b3:06:5c:a1:7d:55:e4:da:ab:5f:b5:38:b0:fc:0d"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
           pip install --upgrade pip
           pip install awscli
           apk add ansible
      - run:
          name: Cat inventory
          command: |
            cd .circleci/ansible/
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook configure-server.yml -i inventory.txt
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: Run database migration
          command: |
            cd backend
            npm install
            npm run build
            echo "run migration ..."
            npm run migrations >> migrations_dump.txt
            echo "migrations dump content ..."
            cat migrations_dump.txt
      - run:
          name: Send database migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
  
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            
            cd frontend
            yum install -y curl tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
  
      - run:
          name: Get backend url and setup environment variables
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${BACKEND_IP}"
            echo "${API_URL}"
            echo ENVIRONMENT=production > "frontend/.env"
            echo API_URL=${API_URL} >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist "s3://udapeople-123rewqwert" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist 
      - destroy-environment:
          to: "FE"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-backend: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          
          fingerprints: ["4f:b3:06:5c:a1:7d:55:e4:da:ab:5f:b5:38:b0:fc:0d"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |  
            pip install --upgrade pip
            pip install awscli
            apk add --update nodejs npm ansible zip
      - run:
          name: Deploy backend
          command: |
              cd backend
              apk add --update nodejs-npm
              apk add --update npm
              npm install
              npm run build
              echo build successful
      - run:
          name: Add env vars
          command: |
              echo ENVIROMENT=production > "backend/dist/.env"
              echo TYPEORM_CONNECTION=postgres >> "backend/dist/.env"
              echo TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js} >> "backend/dist/.env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/dist/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/dist/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/dist/.env"
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/dist/.env"
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/dist/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/dist/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/dist/.env"
      - run:
          name: Configure server
          command: |    
              cd /root/project/backend/dist
              tar czf dist.tar.gz .
              mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
              mv dist.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
              cd /root/project/backend/node_modules
              tar czf node_modules.tar.gz .
              mv node_modules.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Run Ansible
          command: |
            cd /root/project/.circleci/ansible
              echo "Contents  of the inventory.txt file is _____________________________________>>"
              cat inventory.txt
              ansible-playbook deploy-backend.yml -i inventory.txt
      - destroy-environment:
          to: "backend"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  smoke-test:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install --upgrade pip
            pip install awscli
      - run:
          name: BE Smoke Test
          command: |
            BACKEND_IP=$(curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/backendurl_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl ${API_URL}/api/status | grep "ok"
            then
            return 0
            else
            return 1
            fi
      - run:
          name: FE smoke test.
          command: |
            URL="http://udapeople-123rewqwert.s3-website-us-east-1.amazonaws.com"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
     

      - destroy-environment
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   
  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update -y
            yum install -y curl
            aws --version
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
  
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            
            curl https://kvdb.io/4AeZUzzP3axDdsuegrumhC/${CIRCLE_WORKFLOW_ID:0:7} -d $OldWorkflowID

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-123rewqwert" \
              --tags project=udapeople

            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}
      
      - destroy-environment
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            OldWorkflowID=$(curl --insecure https://kvdb.io/4AeZUzzP3axDdsuegrumhC/${CIRCLE_WORKFLOW_ID:0:7})
            echo OldWorkflowID: $OldWorkflowID
            echo Current Workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}
            # Fetch the stack names
            aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text >> ~/stacks.txt
            echo Stack names: $(cat ~/stacks.txt)
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(curl --insecure https://kvdb.io/4AeZUzzP3axDdsuegrumhC/${CIRCLE_WORKFLOW_ID:0:7})
            Stacks=$(cat ~/stacks.txt)
            echo OldWorkflowID: $OldWorkflowID
            echo Stack names: ${Stacks[@]}
            if [[ "${Stacks[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "Destroying environment: ${OldWorkflowID}"
              if echo $Stacks | grep -q "udapeople-backend-${OldWorkflowID}"
              then
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              fi
              if echo $Stacks | grep -q "udapeople-frontend-${OldWorkflowID}"
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              fi
            else
              echo "Error in the Cleanup"
            fi
  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
     