# version: 2.1

# commands:
#   install_awscli:
#     description: Install AWS CLI v2
#     steps:
#       - run:
#           name: Install AWS CLI v2
#           command: |
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#   install_ansible:
#     description: Install Ansible
#     steps:
#       - run:
#           name: Install Ansible
#           command: |
#             sudo apt update
#             sudo apt install software-properties-common -y
#             sudo add-apt-repository --yes --update ppa:ansible/ansible
#             sudo apt install ansible -y
#   install_nodejs:
#     description: Install Node.js 13
#     steps:
#       - run:
#           name: Install Node.js 13
#           command: |
#             # Install Node.js LTS version as our base Node.js version
#             curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
#             sudo apt install -y nodejs
#             # Use n version manager to use Node.js v13.8.0
#             sudo npm install --global n
#             sudo n 13.8.0
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       Workflow_ID:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID:0:7}
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
#             aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
#             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
#   revert-migrations:
#     description: Revert the last migration
#     parameters:
#       Workflow_ID:
#         type: string
#         default: ${CIRCLE_WORKFLOW_ID:0:7}
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
#             # Logic for reverting the database state
#             if (( $SUCCESS == 1 ));
#             then
#               cd ~/project/backend
#               npm install
#               npm run migration:revert
#             fi
# jobs:
#   build-frontend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-deps]
#       - run:
#           name: Build front-end
#           command: |
#             cd frontend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-deps

#   build-backend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-deps]
#       - run:
#           name: Back-end build
#           command: |
#             cd backend
#             npm install
#             npm run build
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-deps

#   test-frontend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-deps]
#       - run:
#           name: Front-end Unit Test
#           command: |
#             cd frontend
#             npm install
#             npm test
#   test-backend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-deps]
#       - run:
#           name: Back-end Unit Test
#           command: |
#             cd backend
#             npm install
#             npm test
#   scan-frontend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [frontend-deps]
#       - run:
#           name: Front-end Scan
#           command: |
#             cd frontend
#             npm install
#             npm audit fix --force --audit-level=critical
#             npm audit fix --force --audit-level=critical
#             npm audit --audit-level=critical
#   scan-backend:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys: [backend-deps]
#       - run:
#           name: Back-end Scan
#           command: |
#             cd backend
#             npm install
#             npm audit fix --force --audit-level=critical
#             npm audit fix --force --audit-level=critical
#             npm audit --audit-level=critical
  
#   deploy-infrastructure:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text)
#             echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
#             cat .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt

#       - destroy-environment

#   configure-infrastructure:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - install_ansible
#       - add_ssh_keys:
#           fingerprints: ["de:c6:5e:b8:d9:28:4a:8f:17:33:bd:bd:98:2c:b0:d3"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Configure Server
#           command: |
#             cd .circleci/ansible
#             cat inventory.txt
#             ansible-playbook -i inventory.txt configure-server.yml
#       - destroy-environment

#   run-migrations:
#     docker:
#       - image: cimg/node:13.8.0
#     steps:
#       - checkout
#       - install_awscli
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
#       - run:
#           name: Send migration status to kvdb.io
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#             then
#               curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             fi
#       - destroy-environment
#       - revert-migrations

#   deploy-frontend:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - restore_cache:
#           keys: [frontend-deps]
#       - run:
#           name: Install dependencies
#           command: |
#             cd frontend
#             npm install
#       - run:
#           name: Get backend url
#           command: |
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text)
#             echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             cd frontend
#             npm run build
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#       - destroy-environment
#       - revert-migrations

#   deploy-backend:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - install_ansible
#       - install_nodejs
#       - add_ssh_keys:
#           fingerprints: ["d5:a4:0d:bd:36:a7:d2:03:2c:10:93:6a:7c:d1:a7:26"]
#       - attach_workspace:
#           at: ~/
#       - restore_cache:
#           keys: [backend-deps]
#       - run:
#           name: Install dependencies
#           command: |
#             cd backend
#             npm install
#       - run:
#           name: Package Backend
#           command: |
#             cd backend
#             npm run build
#             tar -czf artifact.tar.gz dist/* package*
#             cd ..
#             cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
#       - run:
#           name: Deploy backend
#           command: |
#             export TYPEORM_MIGRATIONS_DIR=./migrations
#             export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
#             export TYPEORM_MIGRATIONS=./migrations/*.ts
#             cd .circleci/ansible
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml
#       - destroy-environment
#       - revert-migrations

#   smoke-test:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - run:
#           name: Backend smoke test.
#           command: |
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text)
#             export API_URL=http://${BACKEND_PUBLIC_IP}:3030
#             if curl -s $API_URL/api/status | grep "ok"
#             then
#               exit 0
#             else
#               exit 1
#             fi
#       - run:
#           name: Frontend smoke test.
#           command: |
#             FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
#             if curl -s $FRONTEND_WEBSITE | grep "Welcome"
#             then
#               exit 0
#             else
#               exit 1
#             fi
#       - destroy-environment
#       - revert-migrations

#   cloudfront-update:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - run:
#           name: Save Old Workflow ID to kvdb.io
#           command: |
#             export OLD_WORKFLOW_ID=$(aws cloudformation \
#                       list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#                       --no-paginate --output text)
#             echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
#             curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --stack-name InitialStack
#       - destroy-environment
#       - revert-migrations

#   cleanup:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - install_nodejs
#       - run:
#           name: Remove old stacks and files
#           command: |
#             export STACKS=($(aws cloudformation list-stacks \
#                 --query "StackSummaries[*].StackName" \
#                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#             echo Stack names: "${STACKS[@]}"
#             export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
#             echo Old Workflow ID: $OldWorkflowID 
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#             fi
# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [master]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [run-migrations]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]


version: 2.1
commands:
  dependencies:
    steps:
      - run:
          name: Installing necessary packages
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common
      - run:
          name: Installing aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Installing ansible
          command: |
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
  destroy-environment:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroying environment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive
  revert-migrations:
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Reverting migrations
          when: on_fail
          command: |
            SUCCESS=$(curl "https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
            if (($SUCCESS == 1)); then
              cd backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
          - build-frontend
      - run:
          name: "build the front-end"
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: build-frontend
          paths:
            - frontend/node_modules
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm i
            npm run build
            cp .env dist/.env
            pwd && ls -al
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/dist
            - project/backend/node_modules
      - save_cache:
          key: build-backend
          paths:
            - backend/node_modules

  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Testing backend
          command: |
            cd backend
            npm install
            npm run test
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - run:
          name: Testing frontend
          command: |
            cd frontend
            npm install
            npm run test
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - run:
          name: Scanning backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - run:
          name: Scanning frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Stacks[0].Outputs[0].OutputValue" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "production"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["04:21:ed:89:b7:0c:af:ca:6c:7d:4e:64:48:58:06:3a"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml    
      # - destroy-environment:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'  



  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm i
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            
      - run:
          name: Sending migration status to kvdb
          command: |
            if grep -q "has been executed successfully"  ./backend/migrations_dump.txt   
            then
              curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "1"
            else
              curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
                -H "X-Api-Key: ${THISDB_API_KEY}" \
                -d "0"
            fi
  #     - destroy-environment:
  #         workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  #     - destroy-environment:
  #         workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  deploy-frontend:
    docker:
      - image: cimg/node:13.14.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - build-frontend
      - dependencies
      - run:
          name: Get backend url
          command: |
             BACKEND_IP=$(aws cloudformation describe-stacks --stack-name udapeople-backend-"${CIRCLE_WORKFLOW_ID:0:7}" --query "Stacks[0].Outputs[0].OutputValue" --output text)
             API_URL="http://${BACKEND_IP}:3030"
             echo "API_URL=${API_URL}" >> frontend/.env
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # - destroy-environment:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      # - revert-migrations:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#       # Here's where you will add some code to rollback on failure      


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
        environment:
          NODE_ENV: "production"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES       
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["04:21:ed:89:b7:0c:af:ca:6c:7d:4e:64:48:58:06:3a"]
      - attach_workspace: 
          at: ~/
      - restore_cache:
          keys:
            - build-backend
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm tar gzip
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # - destroy-environment:

  smoke-test-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test
          command: |
             BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
             API_URL="http://${BACKEND_IP}:3030"
             curl "${API_URL}/api/status"
  smoke-test-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Smoke test for front end
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"             
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi           
      # - destroy-environment:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      # - revert-migrations:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}' 
 
  cloudfront-update:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - dependencies
      - run:
          name: get old workflow for clean
          command: |
            OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            curl https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_${CIRCLE_WORKFLOW_ID:0:7} \
            -H "X-Api-Key: ${THISDB_API_KEY}" \
            -d "$OldWorkflowID"  
      - run:
          name: Updating cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      # - destroy-environment:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
      # - revert-migrations:
      #     workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            if [[ 6f4e40c == "" ]]
            then
            echo "No workflow id found"
            else
            if [[ "683c244" != "6f4e40c" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-6f4e40c" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-6f4e40c"
              aws cloudformation delete-stack --stack-name "udapeople-backend-6f4e40c"
            fi
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]